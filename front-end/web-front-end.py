{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "12e6e760",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "running on 0.0.0.0:8000\n",
      " * Serving Flask app \"__main__\" (lazy loading)\n",
      " * Environment: production\n",
      "\u001b[31m   WARNING: This is a development server. Do not use it in a production deployment.\u001b[0m\n",
      "\u001b[2m   Use a production WSGI server instead.\u001b[0m\n",
      " * Debug mode: on\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " * Running on all addresses.\n",
      "   WARNING: This is a development server. Do not use it in a production deployment.\n",
      " * Running on http://192.168.1.117:8000/ (Press CTRL+C to quit)\n",
      " * Restarting with watchdog (fsevents)\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/lizan/opt/anaconda3/lib/python3.9/site-packages/ipykernel_launcher.py\", line 16, in <module>\n",
      "    app.launch_new_instance()\n",
      "  File \"/Users/lizan/opt/anaconda3/lib/python3.9/site-packages/traitlets/config/application.py\", line 845, in launch_instance\n",
      "    app.initialize(argv)\n",
      "  File \"/Users/lizan/opt/anaconda3/lib/python3.9/site-packages/traitlets/config/application.py\", line 88, in inner\n",
      "    return method(app, *args, **kwargs)\n",
      "  File \"/Users/lizan/opt/anaconda3/lib/python3.9/site-packages/ipykernel/kernelapp.py\", line 632, in initialize\n",
      "    self.init_sockets()\n",
      "  File \"/Users/lizan/opt/anaconda3/lib/python3.9/site-packages/ipykernel/kernelapp.py\", line 282, in init_sockets\n",
      "    self.shell_port = self._bind_socket(self.shell_socket, self.shell_port)\n",
      "  File \"/Users/lizan/opt/anaconda3/lib/python3.9/site-packages/ipykernel/kernelapp.py\", line 229, in _bind_socket\n",
      "    return self._try_bind_socket(s, port)\n",
      "  File \"/Users/lizan/opt/anaconda3/lib/python3.9/site-packages/ipykernel/kernelapp.py\", line 205, in _try_bind_socket\n",
      "    s.bind(\"tcp://%s:%i\" % (self.ip, port))\n",
      "  File \"/Users/lizan/opt/anaconda3/lib/python3.9/site-packages/zmq/sugar/socket.py\", line 214, in bind\n",
      "    super().bind(addr)\n",
      "  File \"zmq/backend/cython/socket.pyx\", line 540, in zmq.backend.cython.socket.Socket.bind\n",
      "  File \"zmq/backend/cython/checkrc.pxd\", line 28, in zmq.backend.cython.checkrc._check_rc\n",
      "zmq.error.ZMQError: Address already in use\n"
     ]
    },
    {
     "ename": "SystemExit",
     "evalue": "1",
     "output_type": "error",
     "traceback": [
      "An exception has occurred, use %tb to see the full traceback.\n",
      "\u001b[0;31mSystemExit\u001b[0m\u001b[0;31m:\u001b[0m 1\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "from sqlalchemy import *\n",
    "from sqlalchemy.pool import NullPool\n",
    "from flask import Flask, request, render_template, g, redirect, Response, jsonify, session\n",
    "\n",
    "tmpl_dir = os.path.join(os.path.dirname(os.path.abspath(os.path.realpath('__file__'))), 'templates')\n",
    "\n",
    "\n",
    "#tmpl_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'templates')\n",
    "app = Flask(__name__, template_folder=tmpl_dir)\n",
    "\n",
    "app.secret_key = \"your_secret_key_here\"\n",
    "\n",
    "\n",
    "DATABASE_HOST = \"34.28.53.86\"\n",
    "DATABASEURI = f\"postgresql://yw3945:1885@34.28.53.86/project1\"\n",
    "\n",
    "engine = create_engine(DATABASEURI)\n",
    "\n",
    "with engine.connect() as conn:\n",
    "    # Add table creation and initial data here if needed\n",
    "\n",
    "    pass\n",
    "\n",
    "@app.before_request\n",
    "def before_request():\n",
    "    try:\n",
    "        g.conn = engine.connect()\n",
    "    except:\n",
    "        print(\"uh oh, problem connecting to database\")\n",
    "        import traceback; traceback.print_exc()\n",
    "        g.conn = None\n",
    "\n",
    "@app.teardown_request\n",
    "def teardown_request(exception):\n",
    "    try:\n",
    "        g.conn.close()\n",
    "    except Exception as e:\n",
    "        pass\n",
    "\n",
    "@app.route('/')\n",
    "def index():\n",
    "    print(request.args)\n",
    "\n",
    "    context = dict()\n",
    "\n",
    "    return render_template(\"index.html\", **context)\n",
    "\n",
    "# User registration\n",
    "@app.route('/register', methods=['POST'])\n",
    "def register():\n",
    "    username = request.form['username']\n",
    "    email = request.form['email']\n",
    "    password = request.form['password']\n",
    "    address = request.form['address']\n",
    "\n",
    "    query = \"INSERT INTO account (username, email, password, address) VALUES (:username, :email, :password, :address)\"\n",
    "    g.conn.execute(text(query), username=username, email=email, password=password, address=address)\n",
    "    g.conn.commit()\n",
    "\n",
    "    return redirect('/')\n",
    "\n",
    "# User login\n",
    "@app.route('/login', methods=['POST'])\n",
    "def login():\n",
    "    email = request.form['email']\n",
    "    password = request.form['password']\n",
    "\n",
    "    query = \"SELECT * FROM account WHERE email = :email AND password = :password\"\n",
    "    user = g.conn.execute(text(query), email=email, password=password).fetchone()\n",
    "\n",
    "    if user:\n",
    "        session['user_id'] = user['id']\n",
    "        return redirect('/')\n",
    "    else:\n",
    "        return \"Invalid email or password\", 401\n",
    "\n",
    "@app.route('/add_product', methods=['POST'])\n",
    "def add_product():\n",
    "    if 'user_id' not in session:\n",
    "        return \"You must be logged in to add a product\", 401\n",
    "\n",
    "    name = request.form['name']\n",
    "    category_id = request.form['category_id']\n",
    "    price = request.form['price']\n",
    "    address = request.form['address']\n",
    "    description = request.form['description']\n",
    "\n",
    "    query = \"INSERT INTO product (name, category_id, price, address, description, supplier_id) VALUES (:name, :category_id, :price, :address, :description, :supplier_id)\"\n",
    "    g.conn.execute(text(query), name=name, category_id=category_id, price=price, address=address, description=description, supplier_id=session['user_id'])\n",
    "    g.conn.commit()\n",
    "\n",
    "    return redirect('/')\n",
    "\n",
    "@app.route('/search', methods=['GET'])\n",
    "def search():\n",
    "    search_term = request.args.get('q', '')\n",
    "\n",
    "    query = \"SELECT * FROM product WHERE name ILIKE :search_term\"\n",
    "    products = g.conn.execute(text(query), search_term=f\"%{search_term}%\").fetchall()\n",
    "\n",
    "    return jsonify(products)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    HOST, PORT = '0.0.0.0', 8000\n",
    "    print(\"running on %s:%d\" % (HOST, PORT))\n",
    "    app.run(host=HOST, port=PORT, debug=True, threaded=True)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "087e9822",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7f48bbbb",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1c25f278",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
